<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Studio.Extension.FileSync">
<Description><![CDATA[
<p>SAMPLES / STudio.SourceControl.Example Fork</p>
This class is meant to synchronize Caché Documents with a server-side fileSystem trough Studio hooks
Source Control may then be implemented through FS integration and adequate client
The nice thing about this design is its simplicity
The nicest thing about this approach is that you assume nothing about user, namespace and/or development project
So you shall hook seamlessly this class from any web ide (like router/bpl/deepsee/... creation/modification from SMP)
Typical use case is : sync code on a shared filesystem then use git/github from any machine that get share access
Note : initialcode must be exploded on a FS, and the path to this rot directory need to be setted]]></Description>
<Super>%Studio.Extension.Base</Super>
<TimeCreated>59241,41418</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// added as Ens.Deployment.Utils.SourceControlCheckOut() call for this interface

]]></Content>
</UDLText>

<Method name="AddToSourceControl">
<FormalSpec>InternalName:%String,ignoredInfo:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Login">
<Description>
Perform any login step here.</Description>
<FormalSpec>Name:%String,Password:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = ##super(.Name, .Password)
	W "Studio.Extension.FileSync has been loaded.", !
	Quit sc
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<Description>
depending on the document's type :
- PRJ : set the ^FileSync("current_project")
- Everything (PRJ included) : if file-to-synchronize exists then it takes precedence on Caché Document; if not do nothing</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
 Set filename=##class(Studio.Extension.Utils).ExternalName(InternalName)
 
 If filename="" Quit $$$OK

 #; If no file then skip the import
 If '##class(%File).Exists(filename) Write !,"File ",filename," not found, skipping import" Quit $$$OK

 #; Call the function to do the load
 Set sc=$system.OBJ.Load(filename,"-l-d")
 If $$$ISOK(sc) {
  Write !,"Imported '",InternalName,"' from file '",filename,"'"
 } Else {
  Do DecomposeStatus^%apiOBJ(sc,.errors,"d")
 }
 Quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
After saving an item in Cache we write this out to the XML file so the external source control
tool can see what changes we have made.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 Set filename=##class(Studio.Extension.Utils).ExternalName(InternalName)
 If filename="" Quit $$$OK

 #; Call the export function
 Set sc=$system.OBJ.Export(InternalName,filename,"d/diffexport")
 If $$$ISOK(sc) {
 Write !,"Exported '",InternalName,"' to file '",filename,"'"
 } Else {
 Do DecomposeStatus^%apiOBJ(sc,,"d")
 }
 // TODO there is a corner case here : what if the modified item is a project and modification is about a package ?
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description><![CDATA[
Compilation can change a class as it can update the storage information. As such we need
to check if the item has changed and save it out again if it has, this is already done
by <method>OnAfterSave</method> so just call this.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set filename=##class(Studio.Extension.Utils).ExternalName(InternalName)
 
 If filename="" Quit $$$OK

 #; If no file then skip the import
 If ##class(%File).Exists(filename){
	 If (##class(%File).Delete(filename, .lowLEvelErrorCode)){
		 Write !,"File ",filename," deleted"
		 // TODO if parent dir turns out to be empty, delete it
		 // this will keep the directory structure minimal
	 }
	 Else{
		 Write !,"Fail to suppress file ",filename," ! Please check filesystem permission and/or delete it manually."
	 }
 }
 Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
