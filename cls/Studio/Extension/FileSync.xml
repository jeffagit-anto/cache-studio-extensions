<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Studio.Extension.FileSync">
<Description><![CDATA[
<p>SAMPLES / STudio.SourceControl.Example Fork</p>
This class is meant to synchronize Caché Documents with a FileSystem trough Studio hooks
Source Control may then be implemented through FS integration and adequate client
Note : initialcode must be exploded on a FS, and the path to this rot directory need to be setted]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.SourceControl.Base</Super>
<TimeCreated>59241,41418</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// TODO : inherit from %Studio.Extension.Base, do not implement menu

]]></Content>
</UDLText>

<Method name="Login">
<Description>
Perform any login step here.</Description>
<FormalSpec>Name:%String,Password:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = ##super(.Name, .Password)
	Do ##class(Studio.Extension.Utils).SetCurrentProjectName("")
	W "Studio.Extension.FileSync has been loaded. Remember that you must open a project to begin to synchronize", !
	Quit sc
]]></Implementation>
</Method>

<Method name="IsPRJ">
<Description>
pure wrapper for ##class(Studio.Extension.Utils).IsPRJ(InternalName)</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ##class(Studio.Extension.Utils).IsPRJ(InternalName)
]]></Implementation>
</Method>

<Method name="IsPKG">
<Description>
pure wrapper for ##class(Studio.Extension.Utils).IsPKG(InternalName)</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ##class(Studio.Extension.Utils).IsPKG(InternalName)
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<Description>
depending on the document's type :
- PRJ : set the ^FileSync("current_project")
- Everything (PRJ included) : if file-to-synchronize exists then it takes precedence on Caché Document; if not do nothing</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 Do:..IsPRJ(InternalName) ##class(Studio.Extension.Utils).SetCurrentProjectName(InternalName)
 
 Set filename=##class(Studio.Extension.Utils).ExternalName(InternalName)
 
 If filename="" Quit $$$OK

 #; If no file then skip the import
 If '##class(%File).Exists(filename) Write !,"File ",filename," not found, skipping import" Quit $$$OK

 #; Call the function to do the load
 Set sc=$system.OBJ.Load(filename,"-l-d")
 If $$$ISOK(sc) {
  Write !,"Imported '",InternalName,"' from file '",filename,"'"
 } Else {
  Do DecomposeStatus^%apiOBJ(sc,.errors,"d")
 }
 Quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
After saving an item in Cache we write this out to the XML file so the external source control
tool can see what changes we have made.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 Set filename=##class(Studio.Extension.Utils).ExternalName(InternalName)
 If filename="" Quit $$$OK

 #; Call the export function
 Set sc=$system.OBJ.Export(InternalName,filename,"-d/diffexport")
 If $$$ISOK(sc) {
 Write !,"Exported '",InternalName,"' to file '",filename,"'"
 } Else {
 Do DecomposeStatus^%apiOBJ(sc,,"d")
 }
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description><![CDATA[
Compilation can change a class as it can update the storage information. As such we need
to check if the item has changed and save it out again if it has, this is already done
by <method>OnAfterSave</method> so just call this.]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<Method name="AddToSourceControl">
<Description>
Called to add this item to source control</Description>
<FormalSpec>InternalName:%String,Description:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 // branch to OnAfterSave in the case of we are NOT adding a package 
 Quit:'..IsPKG() ..OnAfterSave(InternalName)
 
 // adding a package :
 // TODO fix that
 Set sc=$system.OBJ.ExportAllClassesIndividual(..ExternalName(InternalName),"-d/diffexport",,,InternalName,1)
 If $$$ISOK(sc) {
  Write !,"Exported Package '",InternalName,"' to '",..ExternalName(InternalName),"'"
 } Else {
  Do DecomposeStatus^%apiOBJ(sc,,"d")
 }
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetStatus">
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Documents are always Editable, never checked out ; UserCheckedOut not implemented
 Set Editable=1,IsCheckedOut=0,UserCheckedOut=""
 Set IsInSourceControl=..IsInSourceControl(InternalName)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 // Document is considered "InSourceControl" iff ExternalName exist on FS
 Set extName=##class(Studio.Extension.Utils).ExternalName(InternalName)
 Quit (extName'=""&&(##class(%File).Exists(extName)))
]]></Implementation>
</Method>
</Class>
</Export>
