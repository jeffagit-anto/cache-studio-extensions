<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Studio.Extension.Utils">
<TimeCreated>63812,6122.281244</TimeCreated>

<Parameter name="SCROOTDIR">
<Default>/Users/jantonio/GitHub/cache-studio-extensions</Default>
</Parameter>

<Parameter name="PRODNAME">
<Default>ROANNE.Production.Production</Default>
</Parameter>

<Method name="ExternalName">
<Description><![CDATA[
This assumes that your directory structure starts with a directory for the type of each item
and then has subdirectories for each '.' in the item name with a base directory added to the
start. So 'User.MyClass.cls' maps to '<base>cls/User/MyClass.xml'.
ExternalName returning "" means that no file sync will be ever done for that InternalName
In case of PKG, ExternalName return the base directory where the package will be mapped to.
This package's subitems (classes, sub-packages, and so on) will be sync'ed below this directory]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$piece(InternalName,".",1,*-1),ext=..GetExtension(InternalName)
	// TODO if ext="" (case of package) ?

	// cannot work with an empty name
	Return:""=name ""
	
	// manage CLS only
	Return:'..IsCLS(InternalName) ""
	
	// pas de Production en source
	Return:..IsProduction(InternalName) ""

	// remove head separator if any
	If $extract(name)="/"||($extract(name)="\") Set name=$extract(name,2,*)
	
	// now return a directory or a file name, depending on cas package/not package
	// alls the . are tr'ed to /, making FQDN like pck1.subpck1.cls1 tr'ed to pck1/subpck1/cls1
	// in the case of an internaleNAme that is not a package :
	//  - all returned filename ends up with .xml extension
	//  - a file hierarchy is maintained with cls/prj/bpl/mac/rul ... at its top
	Set FS=$S($$$isWINDOWS :"\",1:"/")
	// package case :
	Return:..IsPKG(InternalName) ##class(%File).NormalizeDirectory($translate(name,".",FS),..#SCROOTDIR)
	// file case:
	Return ##class(%File).NormalizeFilename(ext_FS_$translate(name,".",FS)_".xml",..#SCROOTDIR)
]]></Implementation>
</Method>

<Method name="GetExtension">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $zconvert($piece(filename,".",*),"l")
]]></Implementation>
</Method>

<Method name="IsPRJ">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit "prj"=..GetExtension(InternalName)
]]></Implementation>
</Method>

<Method name="IsCLS">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit "cls"=..GetExtension(InternalName)
]]></Implementation>
</Method>

<Method name="IsProduction">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#PRODNAME_".CLS" = InternalName
]]></Implementation>
</Method>

<Method name="IsPKG">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit "pkg"=..GetExtension(InternalName)
]]></Implementation>
</Method>
</Class>
</Export>
