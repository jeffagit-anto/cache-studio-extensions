<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Studio.Extension.Utils">
<TimeCreated>63812,6122.281244</TimeCreated>

<Parameter name="SCROOTDIR">
<Default>/Users/jantonio/GitHub/se-fr</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// TODO normalize all names ?

]]></Content>
</UDLText>

<Method name="SetCurrentProjectName">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<Implementation><![CDATA[	Set ^StudioExtensionFileSync("currentProjectName")=$piece(InternalName,".",1,*-1)
]]></Implementation>
</Method>

<Method name="GetCurrentProjectName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $get(^StudioExtensionFileSync("currentProjectName"))
]]></Implementation>
</Method>

<Method name="ExternalName">
<Description><![CDATA[
This assumes that your directory structure starts with a directory for the type of each item
and then has subdirectories for each '.' in the item name with a base directory added to the
start. So 'User.MyClass.cls' maps to '<base>cls/User/MyClass.xml'.
ExternalName returning "" means that no file sync will be ever done for that InternalName
In case of PKG, ExternalName return the base directory where the package will be mapped to.
This package's subitems (classes, sub-packages, and so on) will be sync'ed below this directory]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set projectName = ..GetCurrentProjectName()
	Quit:""=projectName ""
	
	Set name=$piece(InternalName,".",1,*-1),ext=..GetExtension(InternalName)
	// TODO if ext="" (case of package) ?
	If name="" Quit ""
	// remove head separator if any
	If $extract(name)="/"||($extract(name)="\") Set name=$extract(name,2,*)
	If $$$isWINDOWS {
		Quit:"pkg"=ext ..#SCROOTDIR_projectName_"\"_$translate(name,"./","\\")_"\"
		Quit ..#SCROOTDIR_projectName_"\"_ext_"\"_$translate(name,"./","\\")_".xml"
	} Else {
		Quit:"pkg"=ext ..#SCROOTDIR_projectName_"/"_$translate(name,".\","//")_"/"
		Quit ..#SCROOTDIR_projectName_"/"_ext_"/"_$translate(name,".\","//")_".xml"
	}
]]></Implementation>
</Method>

<Method name="GetExtension">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $zconvert($piece(filename,".",*),"l")
]]></Implementation>
</Method>

<Method name="IsPRJ">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit "prj"=..GetExtension(InternalName)
]]></Implementation>
</Method>

<Method name="IsPKG">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit "pkg"=..GetExtension(InternalName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod GetProjectName(InternalName As %String, Output projectName = "") As %Status
{
	// TODO : try by InternalName first, and by lastmodified next
	
	// TODO : by InternalName:
	
	// by lastmodified:
	Set result=##class(%ResultSet).%New("%DynamicQuery:SQL")
	Set sc=result.Prepare("select Name from %studio.project where lastmodified = (select max(lastmodified) from %studio.project)")
	If $$$ISERR(sc) Do DisplayError^%apiOBJ(sc) Quit sc
	Set sc=result.Execute()
	If $$$ISERR(sc) Do DisplayError^%apiOBJ(sc) Quit sc
	Set rowCounter=0
	While result.Next(.sc) {
		If $$$ISERR(sc) Quit
		Set projectName=$get(result.Data("Name"))
		Set rowCounter=rowCounter+1
	}
	If ($$$ISERR(sc)) Do DisplayError^%apiOBJ(sc) Quit sc
	If (rowCounter'=1) Quit $$$ERROR(5808,"too many project name for this resource")
	Quit $$$OK
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
